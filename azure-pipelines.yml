# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  deployToProduction: false

stages:
- stage: 'BUILD_PUBLISH'
  jobs:
  - job: PUBLISH
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--configuration $(buildConfiguration)'
        projects: '**/*.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'DEPLOY_STAGING'
  dependsOn: BUILD_PUBLISH
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-20.04'
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Deploy to Staging'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: 'webAppLinux'
              appName: $(appName)
              package: '$(System.DefaultWorkingDirectory)/**/*.zip'
              deployToSlotOrASE: true
              slotName: 'staging'

- stage: 'DEPLOY_PRODUCTION'
  dependsOn: BUILD_PUBLISH
  condition: eq(variables['deployToProduction'], 'true')
  jobs:
  - job: DEPLOY_PRODUCTION
    steps:
    - task: AzureWebApp@1
      displayName: 'Deploy to Production'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      inputs:
        azureSubscription: $(azureSubscription)
        appType: 'webAppLinux'
        appName: $(appName)
        package: '$(System.DefaultWorkingDirectory)/**/*.zip'
        deployToSlotOrASE: true
        slotName: 'production'